
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "description": "Represents a user account in the MineVerse application.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity. The specific format and generation strategy depend on the target database implementation."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "password": {
          "type": "string",
          "description": "The user's password (should be stored securely using hashing and salting)."
        },
        "profilePreferences": {
          "type": "object",
          "description": "User-defined preferences for their profile (e.g., display name, avatar)."
        },
        "userFriendCode": {
          "type": "string",
          "description": "A unique 10-character code derived from the user's UID, used for adding friends."
        },
        "friendCodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of friend codes associated with the user. (Potentially deprecated in favor of friendIds and userFriendCode)"
        },
        "friendIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of identifiers for related User entities (friends). (Relationship: User N:N User) - To be deprecated"
        }
      },
      "required": [
        "id",
        "username",
        "password",
        "userFriendCode"
      ]
    },
    "Game": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Game",
      "description": "Represents a single Minesweeper game.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Game entity. The specific format and generation strategy depend on the target database implementation."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the unique identifier of the User entity who played this game. (Relationship: User 1:N Games)"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the game started."
        },
        "endTime": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "description": "The date and time the game ended, or null if the game is not yet finished."
        },
        "gameState": {
          "type": "string",
          "description": "A serialized representation of the game board's state. The specific implementation of this field is database-dependent."
        },
        "difficulty": {
          "type": "string",
          "description": "The difficulty level of the game (e.g., easy, medium, hard)."
        },
        "moves": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the move."
              },
              "action": {
                "type": "string",
                "description": "The type of action (e.g., click, flag)."
              },
              "x": {
                "type": "integer",
                "description": "The X coordinate of the move."
              },
              "y": {
                "type": "integer",
                "description": "The Y coordinate of the move."
              },
              "correct": {
                "type": "integer",
                "description": "The Y coordinate of the move."
              }
            },
            "required": [
              "timestamp",
              "action",
              "x",
              "y"
            ]
          },
          "description": "Array of moves made during the game."
        },
        "result": {
          "type": [
            "string",
            "null"
          ],
          "description": "The result of the game (e.g., won, lost, quit), or null if the game is still in progress."
        }
      },
      "required": [
        "id",
        "userId",
        "startTime",
        "gameState",
        "difficulty"
      ]
    },
    "FriendRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FriendRequest",
      "description": "Represents a friend request between two users.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FriendRequest entity. The specific format and generation strategy depend on the target database implementation."
        },
        "requesterId": {
          "type": "string",
          "description": "Reference to the unique identifier of the User entity who sent the friend request. (Relationship: User 1:N FriendRequests [as requester])"
        },
        "recipientId": {
          "type": "string",
          "description": "Reference to the unique identifier of the User entity who received the friend request. (Relationship: User 1:N FriendRequests [as recipient])"
        },
        "requesterFriendCode": {
          "type": "string",
          "description": "The friend code of the user who sent the request."
        },
        "recipientFriendCode": {
          "type": "string",
          "description": "The friend code of the user who received the request."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "accepted",
            "rejected"
          ],
          "description": "The status of the friend request."
        }
      },
      "required": [
        "id",
        "requesterId",
        "recipientId",
        "status",
        "requesterFriendCode",
        "recipientFriendCode"
      ]
    },
    "Friendship": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Friendship",
      "description": "Represents a friendship link between two users.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Friendship entity."
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 2,
          "maxItems": 2,
          "description": "An array containing the UIDs of the two users in the friendship."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the friendship was established."
        }
      },
      "required": [
        "id",
        "users",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "google.com",
      "anonymous"
    ],
    "rationales": {
      "providers": "The application requires users to create a username and password, so password authentication is necessary. Google sign-in provides a convenient alternative. Anonymous sign-in allows guest users to play without registration, which could increase initial engagement."
    }
  },
  "firestore": {
    "structure": [
      {
        "definition": {
          "description": "Collection containing user profile documents.",
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "params": [
            {
              "description": "The unique ID of the user.",
              "name": "userId"
            }
          ]
        },
        "path": "/users/{userId}"
      },
      {
        "definition": {
          "description": "Collection containing game data for each Minesweeper game.",
          "entityName": "Game",
          "schema": {
            "$ref": "#/backend/entities/Game"
          },
          "params": [
            {
              "description": "The unique ID of the game.",
              "name": "gameId"
            }
          ]
        },
        "path": "/games/{gameId}"
      },
      {
        "definition": {
          "description": "Collection containing friend request documents.",
          "entityName": "FriendRequest",
          "schema": {
            "$ref": "#/backend/entities/FriendRequest"
          },
          "params": [
            {
              "description": "The unique ID of the friend request.",
              "name": "friendRequestId"
            }
          ]
        },
        "path": "/friendRequests/{friendRequestId}"
      },
      {
        "definition": {
          "description": "Collection containing friendship links between users.",
          "entityName": "Friendship",
          "schema": {
            "$ref": "#/backend/entities/Friendship"
          },
          "params": [
            {
              "description": "The unique ID of the friendship link.",
              "name": "friendshipId"
            }
          ]
        },
        "path": "/friendships/{friendshipId}"
      }
    ],
    "reasoning": "Based on the application proposal and data entities, I recommend the following Firestore structure:\n\n*   **users Collection:** Stores user profile information.\n*   **games Collection:** Stores Minesweeper game data.\n*   **friendRequests Collection:** Stores friend request data.\n*   **friendships Collection:** Stores documents representing a friendship link between two users. Each document contains an array of two user UIDs. This is used instead of storing friend lists directly in user documents to simplify permissions and improve scalability.\n\nThis structure allows efficient querying of user data, game history, and friend relationships."
  }
}
